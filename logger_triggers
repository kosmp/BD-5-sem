CREATE OR REPLACE FUNCTION log_order_changes()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        INSERT INTO OrdersLog (log_timestamp, action, order_id, date, status, client_id, pick_up_point_id)
        VALUES (CURRENT_TIMESTAMP, 'INSERT', NEW.id, NEW.date, NEW.status, NEW.client_id, NEW.pick_up_point_id);
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER log_order_changes_trigger
AFTER INSERT ON Orders
FOR EACH ROW
EXECUTE PROCEDURE log_order_changes();

----------------------------------------------

CREATE OR REPLACE FUNCTION log_review_changes()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        INSERT INTO ReviewsLog (log_timestamp, action, review_id, review_text, add_date, book_id)
        VALUES (CURRENT_TIMESTAMP, 'INSERT', NEW.id, NEW.review_text, NEW.add_date, NEW.book_id);
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER log_review_changes_trigger
AFTER INSERT ON Reviews
FOR EACH ROW
EXECUTE PROCEDURE log_review_changes();

